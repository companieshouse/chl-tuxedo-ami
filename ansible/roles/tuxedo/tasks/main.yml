---

- name: Format swap volume
  command: "mkswap {{ swap_volume_device_node }}"
  when: swap_volume_enabled | bool

- name: Add swap volume to filesystem table
  mount:
    path: swap
    src: "{{ swap_volume_device_node }}"
    fstype: swap
    opts: defaults
    state: present
  when: swap_volume_enabled | bool

- name: Install the 'Development tools' package group
  yum:
    name: "@Development tools"
    state: present

- name: Install i686 build-time software dependencies
  yum:
    name:
      - expat-devel.i686
      - glibc-devel.i686
      - libcurl-devel.i686
      - ncurses-devel.i686
      - openssl-devel.i686
      - readline-devel.i686
    state: latest

- name: Install i686 run-time software dependencies
  yum:
    name:
      - glibc.i686
      - libgcc.i686
      - libstdc++.i686
      - openssl-libs.i686
      - zlib.i686
    state: latest

- name: Create service groups
  group:
    name: "{{ chl_service_group }}"
    state: present
    system: no

- name: Create service users
  user:
    name: "{{ item }}"
    groups: "{{ chl_service_group }}"
    shell: /bin/bash
    system: no
  loop: "{{ chl_service_users }}"

- name: Create temporary directory
  tempfile:
    state: directory
  register: temp_dir

- name: Create Tuxedo installation directory
  file:
    path: "{{ tuxedo_install_directory }}"
    owner: root
    group: root
    mode: '0755'
    state: directory

- name: Download Tuxedo archive
  aws_s3:
    bucket: "{{ resource_bucket_name }}"
    object: "{{ resource_bucket_tuxedo_prefix }}/tuxedo-{{ tuxedo_version }}.tar.gz"
    dest: "{{ temp_dir.path }}/tuxedo-{{ tuxedo_version }}.tar.gz"
    mode: get

- name: Extract Tuxedo archive
  unarchive:
    src: "{{ temp_dir.path }}/tuxedo-{{ tuxedo_version }}.tar.gz"
    dest: "{{ tuxedo_install_directory }}"
    remote_src: yes

- name: Create Oracle Database installation directory
  file:
    path: "{{ oracle_database_install_directory }}"
    owner: root
    group: root
    mode: '0755'
    state: directory

- name: Download Oracle Database archive
  aws_s3:
    bucket: "{{ resource_bucket_name }}"
    object: "{{ resource_bucket_oracle_database_prefix }}/oracle-database-{{ oracle_database_version }}.tar.gz"
    dest: "{{ temp_dir.path }}/oracle-database-{{ oracle_database_version }}.tar.gz"
    mode: get

- name: Extract Oracle Database archive
  unarchive:
    src: "{{ temp_dir.path }}/oracle-database-{{ oracle_database_version }}.tar.gz"
    dest: "{{ oracle_database_install_directory }}"
    remote_src: yes

- name: Remove temporary directory
  file:
    path: temp_dir.path
    state: absent

- fail:
    msg: Skip final AMI creation during development
  when: true
